#!/bin/bash
set -e

echo "🏗️  Initializing LocalStack + Terraform..."
echo ""

# Check prerequisites
echo "Checking prerequisites..."
if ! command -v docker &> /dev/null; then
    echo "❌ Error: Docker is not installed"
    exit 1
fi

if ! command -v terraform &> /dev/null; then
    echo "❌ Error: Terraform is not installed"
    echo "Install with: brew install terraform"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "❌ Error: jq is not installed"
    echo "Install with: brew install jq"
    exit 1
fi

echo "✅ Prerequisites check passed"
echo ""

# Start LocalStack
echo "Starting LocalStack..."
docker-compose -f docker-compose.pipeline.yml up -d localstack

# Wait for LocalStack
echo "Waiting for LocalStack to be ready..."
TIMEOUT=90
ELAPSED=0
until curl -s http://localhost:4566/_localstack/health | jq -e '[.services.sqs, .services.s3, .services.secretsmanager] | all(. == "available" or . == "running")' > /dev/null 2>&1; do
    if [ $ELAPSED -ge $TIMEOUT ]; then
        echo "❌ Error: LocalStack failed to start within ${TIMEOUT} seconds"
        echo "Check logs with: docker-compose -f docker-compose.pipeline.yml logs localstack"
        echo "Current health status:"
        curl -s http://localhost:4566/_localstack/health | jq '.'
        exit 1
    fi
    echo -n "."
    sleep 2
    ELAPSED=$((ELAPSED + 2))
done
echo ""
echo "✅ LocalStack is ready"
echo ""

# Initialize Terraform
echo "Initializing Terraform..."
cd terraform/environments/local
terraform init

if [ $? -ne 0 ]; then
    echo "❌ Error: Terraform init failed"
    exit 1
fi
echo "✅ Terraform initialized"
echo ""

# Apply Terraform
echo "Creating AWS resources in LocalStack..."
terraform apply -auto-approve

if [ $? -ne 0 ]; then
    echo "❌ Error: Terraform apply failed"
    exit 1
fi
echo "✅ Terraform applied successfully"
echo ""

# Export outputs to .env file
echo "Exporting Terraform outputs to .env.local..."
SQS_QUEUE_URL=$(terraform output -raw sqs_queue_url)
S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
TRADING_API_SECRET_NAME=$(terraform output -json secrets | jq -r '.trading_api_secret_name')
SMTP_SECRET_NAME=$(terraform output -json secrets | jq -r '.smtp_secret_name')

# Return to project root
cd ../../../

# Check if .env.local exists
if [ ! -f .env.local ]; then
    echo "Creating .env.local from template..."
    cp env.local.template .env.local
fi

# Remove old LocalStack section if exists
sed -i.bak '/# LocalStack + Terraform/,/AWS_ENDPOINT_URL=/d' .env.local 2>/dev/null || true
rm -f .env.local.bak

# Append new configuration
cat >> .env.local << EOF

# LocalStack + Terraform (auto-generated by init-localstack-terraform.sh)
SQS_QUEUE_URL=${SQS_QUEUE_URL}
S3_BUCKET_NAME=${S3_BUCKET_NAME}
TRADING_API_SECRET_NAME=${TRADING_API_SECRET_NAME}
SMTP_SECRET_NAME=${SMTP_SECRET_NAME}
AWS_REGION=us-east-1
AWS_ENDPOINT_URL=http://localhost:4566
EOF

echo "✅ Environment variables added to .env.local"
echo ""

# Display summary
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ LocalStack + Terraform Setup Complete"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Resources created:"
echo "  • SQS Queue: ${SQS_QUEUE_URL}"
echo "  • S3 Bucket: ${S3_BUCKET_NAME}"
echo "  • Secrets: ${TRADING_API_SECRET_NAME}, ${SMTP_SECRET_NAME}"
echo ""
echo "Next steps:"
echo "  1. Build services:"
echo "     docker-compose -f docker-compose.pipeline.yml build"
echo ""
echo "  2. Start full stack:"
echo "     docker-compose -f docker-compose.pipeline.yml up -d"
echo ""
echo "  3. Test SQS queue:"
echo "     aws --endpoint-url=http://localhost:4566 sqs receive-message \\"
echo "       --queue-url ${SQS_QUEUE_URL}"
echo ""
echo "  4. Test S3 bucket:"
echo "     aws --endpoint-url=http://localhost:4566 s3 ls s3://${S3_BUCKET_NAME}/"
echo ""
echo "For more information, see:"
echo "  • terraform/environments/local/README.md"
echo "  • docs/pipelines/testing-localstack.md"
echo ""

