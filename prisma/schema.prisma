// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Multi-tenancy: All tables include tenantId for data isolation
model Tenant {
  id              String   @id @default(cuid())
  name            String
  industry        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientKPIs      ClientKPI[]
  users           User[]
  integrations    Integration[]

  @@map("tenants")
}

model User {
  id              String   @id @default(cuid())
  tenantId        String
  email           String   @unique
  role            UserRole @default(VIEWER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Primary business entity
model ClientKPI {
  id              String   @id @default(cuid())
  tenantId        String
  clientId        String   // External client identifier (unique per tenant)
  clientName      String
  industry        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  financials      Financial[]
  leadEvents      LeadEvent[]
  customMetrics   CustomMetric[]

  @@unique([tenantId, clientId])
  @@index([tenantId])
  @@map("client_kpis")
}

// Time-series financial data
model Financial {
  id              String   @id @default(cuid())
  clientKPIId     String
  recordDate      DateTime @db.Date
  revenue         Decimal  @db.Decimal(12, 2)
  expenses        Decimal  @db.Decimal(12, 2)
  netProfit       Decimal  @db.Decimal(12, 2)
  cashFlow        Decimal  @db.Decimal(12, 2)
  currency        String   @default("AUD")
  sourceSystem    String?  // e.g., "xero", "myob"
  externalId      String?  // External system record ID
  metadata        Json?    // Flexible storage for system-specific fields
  createdAt       DateTime @default(now())

  clientKPI       ClientKPI @relation(fields: [clientKPIId], references: [id], onDelete: Cascade)

  @@unique([clientKPIId, recordDate, sourceSystem])
  @@index([clientKPIId, recordDate])
  @@index([recordDate])
  @@map("financials")
}

// CRM/Sales pipeline tracking
model LeadEvent {
  id              String   @id @default(cuid())
  clientKPIId     String
  eventDate       DateTime
  leadId          String   // External lead/deal identifier
  stage           String   // e.g., "prospect", "qualified", "proposal", "closed-won"
  value           Decimal? @db.Decimal(12, 2)
  status          String   // e.g., "active", "stale", "lost"
  sourceSystem    String?  // e.g., "hubspot", "pipedrive"
  externalId      String?
  metadata        Json?
  createdAt       DateTime @default(now())

  clientKPI       ClientKPI @relation(fields: [clientKPIId], references: [id], onDelete: Cascade)

  @@index([clientKPIId, eventDate])
  @@index([leadId])
  @@index([stage, status])
  @@map("lead_events")
}

// Flexible custom KPIs
model CustomMetric {
  id              String   @id @default(cuid())
  clientKPIId     String
  metricName      String   // e.g., "project_delivery_days", "customer_satisfaction"
  metricValue     Decimal  @db.Decimal(12, 4)
  unit            String?  // e.g., "days", "percent", "count"
  recordDate      DateTime
  sourceSystem    String?
  metadata        Json?
  embedding       Unsupported("vector(1536)")? // Future: OpenAI embeddings for RAG
  createdAt       DateTime @default(now())

  clientKPI       ClientKPI @relation(fields: [clientKPIId], references: [id], onDelete: Cascade)

  @@index([clientKPIId, metricName, recordDate])
  @@map("custom_metrics")
}

// Integration configuration (stores OAuth tokens securely)
model Integration {
  id              String   @id @default(cuid())
  tenantId        String
  provider        String   // e.g., "xero", "hubspot", "asana"
  status          IntegrationStatus @default(PENDING)
  accessToken     String   @db.Text // Encrypted at application layer
  refreshToken    String?  @db.Text // Encrypted
  expiresAt       DateTime?
  metadata        Json?    // Provider-specific config
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider])
  @@index([tenantId])
  @@map("integrations")
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  ERROR
  DISABLED
}