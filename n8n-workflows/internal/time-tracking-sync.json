{
  "name": "Zixly Time Tracking Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 17 * * 1-5"
            }
          ]
        }
      },
      "id": "daily-sync-trigger",
      "name": "Daily Sync Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://plane:8000/api/v1/projects/",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "planeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-plane-projects",
      "name": "Fetch Plane Projects",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "credentials": {
        "planeApi": {
          "id": "zixly-plane",
          "name": "Zixly Plane API"
        }
      }
    },
    {
      "parameters": {
        "url": "http://plane:8000/api/v1/issues/",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "planeApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "state",
                "value": "completed"
              },
              {
                "name": "updated_at__gte",
                "value": "={{ new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() }}"
              }
            ]
          }
        }
      },
      "id": "fetch-completed-tasks",
      "name": "Fetch Completed Tasks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300],
      "credentials": {
        "planeApi": {
          "id": "zixly-plane",
          "name": "Zixly Plane API"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": "client_kpis",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "id",
            "clientId": "clientId",
            "clientName": "clientName"
          }
        },
        "options": {}
      },
      "id": "fetch-client-mapping",
      "name": "Fetch Client Mapping",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process completed tasks and calculate billable hours\nconst completedTasks = $input.all();\nconst clientMapping = $('Fetch Client Mapping').all();\n\n// Create a mapping of project identifiers to client IDs\nconst projectToClient = {};\nclientMapping.forEach(client => {\n  projectToClient[client.clientId] = client.id;\n});\n\n// Group tasks by project and calculate hours\nconst projectHours = {};\nconst today = new Date().toISOString().split('T')[0];\n\ncompletedTasks.forEach(task => {\n  const projectId = task.project;\n  const clientId = task.project_identifier || projectId;\n  \n  if (!projectHours[clientId]) {\n    projectHours[clientId] = {\n      clientId: clientId,\n      totalHours: 0,\n      tasks: [],\n      date: today\n    };\n  }\n  \n  // Estimate hours based on task complexity (simplified)\n  const estimatedHours = task.estimate_point ? task.estimate_point * 0.5 : 2; // Default 2 hours\n  projectHours[clientId].totalHours += estimatedHours;\n  projectHours[clientId].tasks.push({\n    id: task.id,\n    name: task.name,\n    hours: estimatedHours\n  });\n});\n\n// Convert to array for processing\nreturn Object.values(projectHours).map(project => ({\n  json: {\n    clientKPIId: projectToClient[project.clientId] || null,\n    clientId: project.clientId,\n    totalHours: project.totalHours,\n    tasks: project.tasks,\n    date: project.date,\n    sourceSystem: 'plane'\n  }\n}));"
      },
      "id": "process-time-data",
      "name": "Process Time Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-client-mapping",
              "leftValue": "={{ $json.clientKPIId }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validate-client-mapping",
      "name": "Validate Client Mapping",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "custom_metric",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "clientKPIId": "={{ $json.clientKPIId }}",
            "metricName": "billable_hours",
            "metricValue": "={{ $json.totalHours }}",
            "unit": "hours",
            "recordDate": "={{ $json.date }}",
            "sourceSystem": "plane",
            "metadata": "={{ JSON.stringify({ tasks: $json.tasks, syncDate: new Date().toISOString(), workflowId: 'time-tracking-sync' }) }}"
          }
        }
      },
      "id": "create-billable-hours-metric",
      "name": "Create Billable Hours Metric",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1560, 200],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "table": "custom_metric",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "clientKPIId": "={{ $json.clientKPIId }}",
            "metricName": "project_velocity",
            "metricValue": "={{ $json.tasks.length }}",
            "unit": "tasks",
            "recordDate": "={{ $json.date }}",
            "sourceSystem": "plane",
            "metadata": "={{ JSON.stringify({ completedTasks: $json.tasks.length, totalHours: $json.totalHours, syncDate: new Date().toISOString(), workflowId: 'time-tracking-sync' }) }}"
          }
        }
      },
      "id": "create-project-velocity-metric",
      "name": "Create Project Velocity Metric",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1780, 200],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "data_sync_status",
        "updateKey": "dataSource",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tenantId": "zixly-org-001",
            "dataSource": "plane",
            "lastSyncAt": "={{ new Date().toISOString() }}",
            "nextSyncAt": "={{ new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() }}",
            "recordCount": "={{ $json.tasks.length }}",
            "status": "success"
          }
        },
        "options": {}
      },
      "id": "update-sync-status",
      "name": "Update Sync Status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2000, 200],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "cole.morton@hotmail.com",
        "toEmail": "cole.morton@hotmail.com",
        "subject": "Daily Time Tracking Sync - {{ new Date().toLocaleDateString() }}",
        "message": "Daily Time Tracking Sync Completed\n\nDate: {{ new Date().toLocaleDateString() }}\nTotal Hours Tracked: {{ $json.totalHours }}\nTasks Completed: {{ $json.tasks.length }}\n\nClient Breakdown:\n{{ $json.tasks.map(task => `- ${task.name}: ${task.hours} hours`).join('\\n') }}\n\nSync Status: Success\nNext Sync: {{ new Date(Date.now() + 24 * 60 * 60 * 1000).toLocaleDateString() }}",
        "options": {}
      },
      "id": "send-sync-notification",
      "name": "Send Sync Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [2220, 200],
      "credentials": {
        "smtp": {
          "id": "zixly-smtp",
          "name": "Zixly SMTP"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "cole.morton@hotmail.com",
        "toEmail": "cole.morton@hotmail.com",
        "subject": "Time Tracking Sync - Client Mapping Missing",
        "message": "Time Tracking Sync Warning\n\nDate: {{ new Date().toLocaleDateString() }}\n\nSome completed tasks could not be mapped to clients:\n\n{{ $json.tasks.map(task => `- ${task.name} (Project: ${task.clientId})`).join('\\n') }}\n\nPlease check the client mapping configuration.\n\nSync Status: Partial Success",
        "options": {}
      },
      "id": "send-warning-notification",
      "name": "Send Warning Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1560, 400],
      "credentials": {
        "smtp": {
          "id": "zixly-smtp",
          "name": "Zixly SMTP"
        }
      }
    }
  ],
  "connections": {
    "Daily Sync Trigger": {
      "main": [
        [
          {
            "node": "Fetch Plane Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Plane Projects": {
      "main": [
        [
          {
            "node": "Fetch Completed Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Completed Tasks": {
      "main": [
        [
          {
            "node": "Fetch Client Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Client Mapping": {
      "main": [
        [
          {
            "node": "Process Time Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Time Data": {
      "main": [
        [
          {
            "node": "Validate Client Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Client Mapping": {
      "main": [
        [
          {
            "node": "Create Billable Hours Metric",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Warning Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Billable Hours Metric": {
      "main": [
        [
          {
            "node": "Create Project Velocity Metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Project Velocity Metric": {
      "main": [
        [
          {
            "node": "Update Sync Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Sync Status": {
      "main": [
        [
          {
            "node": "Send Sync Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-27T00:00:00.000Z",
      "updatedAt": "2025-01-27T00:00:00.000Z",
      "id": "time-tracking",
      "name": "Time Tracking"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "versionId": "1"
}
