{
  "name": "Zixly Financial Reporting",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * 1"
            }
          ]
        }
      },
      "id": "weekly-report-trigger",
      "name": "Weekly Report Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "select",
        "table": "financial",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "id",
            "clientKPIId": "clientKPIId",
            "revenue": "revenue",
            "expenses": "expenses",
            "netProfit": "netProfit",
            "recordDate": "recordDate",
            "sourceSystem": "sourceSystem"
          }
        },
        "options": {
          "filter": {
            "recordDate": {
              "gte": "={{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}"
            }
          }
        }
      },
      "id": "fetch-weekly-financials",
      "name": "Fetch Weekly Financials",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": "custom_metric",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "id",
            "clientKPIId": "clientKPIId",
            "metricName": "metricName",
            "metricValue": "metricValue",
            "recordDate": "recordDate"
          }
        },
        "options": {
          "filter": {
            "metricName": {
              "in": "billable_hours,project_velocity,client_satisfaction"
            },
            "recordDate": {
              "gte": "={{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}"
            }
          }
        }
      },
      "id": "fetch-weekly-metrics",
      "name": "Fetch Weekly Metrics",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": "client_kpis",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "id",
            "clientName": "clientName",
            "industry": "industry"
          }
        },
        "options": {}
      },
      "id": "fetch-client-details",
      "name": "Fetch Client Details",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process financial data and generate weekly report\nconst financials = $('Fetch Weekly Financials').all();\nconst metrics = $('Fetch Weekly Metrics').all();\nconst clients = $('Fetch Client Details').all();\n\n// Create client lookup\nconst clientLookup = {};\nclients.forEach(client => {\n  clientLookup[client.id] = client;\n});\n\n// Calculate weekly totals\nconst weeklyTotals = {\n  totalRevenue: 0,\n  totalExpenses: 0,\n  totalProfit: 0,\n  totalBillableHours: 0,\n  totalProjects: 0,\n  averageSatisfaction: 0,\n  clientCount: 0\n};\n\n// Process financial data\nconst clientBreakdown = {};\nfinancials.forEach(financial => {\n  const client = clientLookup[financial.clientKPIId];\n  if (client) {\n    if (!clientBreakdown[client.clientName]) {\n      clientBreakdown[client.clientName] = {\n        clientName: client.clientName,\n        industry: client.industry,\n        revenue: 0,\n        expenses: 0,\n        profit: 0,\n        billableHours: 0,\n        projects: 0,\n        satisfaction: 0\n      };\n    }\n    \n    clientBreakdown[client.clientName].revenue += parseFloat(financial.revenue || 0);\n    clientBreakdown[client.clientName].expenses += parseFloat(financial.expenses || 0);\n    clientBreakdown[client.clientName].profit += parseFloat(financial.netProfit || 0);\n    \n    weeklyTotals.totalRevenue += parseFloat(financial.revenue || 0);\n    weeklyTotals.totalExpenses += parseFloat(financial.expenses || 0);\n    weeklyTotals.totalProfit += parseFloat(financial.netProfit || 0);\n  }\n});\n\n// Process metrics data\nconst satisfactionScores = [];\nmetrics.forEach(metric => {\n  const client = clientLookup[metric.clientKPIId];\n  if (client && clientBreakdown[client.clientName]) {\n    if (metric.metricName === 'billable_hours') {\n      const hours = parseFloat(metric.metricValue || 0);\n      clientBreakdown[client.clientName].billableHours += hours;\n      weeklyTotals.totalBillableHours += hours;\n    } else if (metric.metricName === 'project_velocity') {\n      const projects = parseFloat(metric.metricValue || 0);\n      clientBreakdown[client.clientName].projects += projects;\n      weeklyTotals.totalProjects += projects;\n    } else if (metric.metricName === 'client_satisfaction') {\n      const satisfaction = parseFloat(metric.metricValue || 0);\n      clientBreakdown[client.clientName].satisfaction = Math.max(clientBreakdown[client.clientName].satisfaction, satisfaction);\n      satisfactionScores.push(satisfaction);\n    }\n  }\n});\n\n// Calculate averages\nweeklyTotals.averageSatisfaction = satisfactionScores.length > 0 \n  ? satisfactionScores.reduce((sum, score) => sum + score, 0) / satisfactionScores.length \n  : 0;\nweeklyTotals.clientCount = Object.keys(clientBreakdown).length;\n\n// Calculate profit margin\nweeklyTotals.profitMargin = weeklyTotals.totalRevenue > 0 \n  ? (weeklyTotals.totalProfit / weeklyTotals.totalRevenue) * 100 \n  : 0;\n\n// Calculate revenue per hour\nweeklyTotals.revenuePerHour = weeklyTotals.totalBillableHours > 0 \n  ? weeklyTotals.totalRevenue / weeklyTotals.totalBillableHours \n  : 0;\n\nreturn [{\n  json: {\n    weekEnding: new Date().toISOString().split('T')[0],\n    totals: weeklyTotals,\n    clientBreakdown: Object.values(clientBreakdown),\n    reportDate: new Date().toISOString()\n  }\n}];"
      },
      "id": "generate-financial-report",
      "name": "Generate Financial Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "table": "custom_metric",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "clientKPIId": "zixly-org-001",
            "metricName": "weekly_revenue",
            "metricValue": "={{ $json.totals.totalRevenue }}",
            "unit": "AUD",
            "recordDate": "={{ $json.weekEnding }}",
            "sourceSystem": "n8n",
            "metadata": "={{ JSON.stringify({ reportType: 'weekly', totals: $json.totals, reportDate: $json.reportDate, workflowId: 'financial-reporting' }) }}"
          }
        }
      },
      "id": "store-weekly-revenue-metric",
      "name": "Store Weekly Revenue Metric",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1340, 200],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "table": "custom_metric",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "clientKPIId": "zixly-org-001",
            "metricName": "weekly_profit_margin",
            "metricValue": "={{ $json.totals.profitMargin }}",
            "unit": "percent",
            "recordDate": "={{ $json.weekEnding }}",
            "sourceSystem": "n8n",
            "metadata": "={{ JSON.stringify({ reportType: 'weekly', profitMargin: $json.totals.profitMargin, reportDate: $json.reportDate, workflowId: 'financial-reporting' }) }}"
          }
        }
      },
      "id": "store-profit-margin-metric",
      "name": "Store Profit Margin Metric",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1340, 400],
      "credentials": {
        "supabaseApi": {
          "id": "zixly-supabase",
          "name": "Zixly Supabase"
        }
      }
    },
    {
      "parameters": {
        "fromEmail": "cole.morton@hotmail.com",
        "toEmail": "cole.morton@hotmail.com",
        "subject": "Zixly Weekly Financial Report - Week Ending {{ $json.weekEnding }}",
        "message": "Zixly Weekly Financial Report\n\nWeek Ending: {{ $json.weekEnding }}\nReport Generated: {{ new Date().toLocaleString() }}\n\n=== WEEKLY TOTALS ===\nTotal Revenue: ${{ $json.totals.totalRevenue.toFixed(2) }}\nTotal Expenses: ${{ $json.totals.totalExpenses.toFixed(2) }}\nNet Profit: ${{ $json.totals.totalProfit.toFixed(2) }}\nProfit Margin: {{ $json.totals.profitMargin.toFixed(1) }}%\n\n=== OPERATIONAL METRICS ===\nTotal Billable Hours: {{ $json.totals.totalBillableHours.toFixed(1) }} hours\nTotal Projects: {{ $json.totals.totalProjects }}\nAverage Client Satisfaction: {{ $json.totals.averageSatisfaction.toFixed(1) }}/10\nRevenue per Hour: ${{ $json.totals.revenuePerHour.toFixed(2) }}\n\n=== CLIENT BREAKDOWN ===\n{{ $json.clientBreakdown.map(client => `${client.clientName} (${client.industry}):\\n  Revenue: $${client.revenue.toFixed(2)}\\n  Expenses: $${client.expenses.toFixed(2)}\\n  Profit: $${client.profit.toFixed(2)}\\n  Billable Hours: ${client.billableHours.toFixed(1)}h\\n  Projects: ${client.projects}\\n  Satisfaction: ${client.satisfaction.toFixed(1)}/10`).join('\\n\\n') }}\n\n=== ANALYSIS ===\n{{ $json.totals.profitMargin > 20 ? '✅ Strong profit margins this week' : '⚠️ Profit margins below target' }}\n{{ $json.totals.averageSatisfaction > 8 ? '✅ Excellent client satisfaction' : '⚠️ Client satisfaction needs attention' }}\n{{ $json.totals.revenuePerHour > 150 ? '✅ Good revenue efficiency' : '⚠️ Revenue per hour below target' }}\n\nBest regards,\nZixly Financial Reporting System",
        "options": {}
      },
      "id": "send-financial-report",
      "name": "Send Financial Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1560, 300],
      "credentials": {
        "smtp": {
          "id": "zixly-smtp",
          "name": "Zixly SMTP"
        }
      }
    },
    {
      "parameters": {
        "url": "http://xero:8080/api/v1/reports/ProfitAndLoss",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "xeroApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "name": "fromDate",
                "value": "={{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}"
              },
              {
                "name": "toDate",
                "value": "={{ new Date().toISOString().split('T')[0] }}"
              }
            ]
          }
        }
      },
      "id": "sync-to-xero",
      "name": "Sync to Xero",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 300],
      "credentials": {
        "xeroApi": {
          "id": "zixly-xero",
          "name": "Zixly Xero API"
        }
      }
    }
  ],
  "connections": {
    "Weekly Report Trigger": {
      "main": [
        [
          {
            "node": "Fetch Weekly Financials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Weekly Financials": {
      "main": [
        [
          {
            "node": "Fetch Weekly Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Weekly Metrics": {
      "main": [
        [
          {
            "node": "Fetch Client Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Client Details": {
      "main": [
        [
          {
            "node": "Generate Financial Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Financial Report": {
      "main": [
        [
          {
            "node": "Store Weekly Revenue Metric",
            "type": "main",
            "index": 0
          },
          {
            "node": "Store Profit Margin Metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Weekly Revenue Metric": {
      "main": [
        [
          {
            "node": "Send Financial Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Profit Margin Metric": {
      "main": [
        [
          {
            "node": "Send Financial Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Financial Report": {
      "main": [
        [
          {
            "node": "Sync to Xero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-27T00:00:00.000Z",
      "updatedAt": "2025-01-27T00:00:00.000Z",
      "id": "financial-reporting",
      "name": "Financial Reporting"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "versionId": "1"
}
